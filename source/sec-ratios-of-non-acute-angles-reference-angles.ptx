<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-ratios-of-non-acute-angles-reference-angles">
  <title>Ratios of Non-Acute Angles, Reference Angles</title>

  <introduction>
    <p>
      Introduction
    </p>
  </introduction>

  <subsection>
    <title></title>
    <p>
      This is a subsection.
    </p>

    <exercises xml:id="exercises-trig-exact">
   
    <exercise xml:id="practice-trig-value" label="trig-exact-practice">
      <title>Exact Trig-Value Practice</title>
  
      <statement>
        <p>
          Evaluate <m><eval obj="func"/>\bigl(<eval obj="angleTeX"/>\bigr)</m> exactly.
        </p>
      
        <p>
          Your answer:
          <fillin ansobj="answerExpr" mode="math" width="8"/>
        </p>
        <p>
          For square roots, type "sqrt", not a decimal approximation (for example, type "sqrt(3)", or "sqrt(2)").
        </p>
      </statement>
    
      <setup seed="123">
        <setupScript><![CDATA[
    
          // === OPTIONS ===
          const USE_RADIANS = true;
          const ALLOW_NEGATIVE = true;
          const ALLOW_WRAP = true;
          const USE_RECIPROCALS = true;
    
          // === Exact values for key angles ===
          const exact = {
            sin: {
              0: "0", 30: "1/2", 45: "sqrt(2)/2", 60: "sqrt(3)/2", 90: "1",
              120: "sqrt(3)/2", 135: "sqrt(2)/2", 150: "1/2", 180: "0",
              210: "-1/2", 225: "-sqrt(2)/2", 240: "-sqrt(3)/2", 270: "-1",
              300: "-sqrt(3)/2", 315: "-sqrt(2)/2", 330: "-1/2"
            }
          };
    
          // Generate cos, tan
          exact.cos = {};
          exact.tan = {};
          for (let deg in exact.sin) {
            const s = eval(exact.sin[deg].replace("sqrt", "Math.sqrt"));
            const c = Math.cos(deg * Math.PI / 180);
            const cs = Math.abs(c) < 1e-10 ? "0" :
                        Math.abs(c - 0.5) < 1e-10 ? "1/2" :
                        Math.abs(c - Math.sqrt(2)/2) < 1e-10 ? "sqrt(2)/2" :
                        "sqrt(3)/2";
            exact.cos[deg] = c < 0 ? "-" + cs : cs;
    
            if (Math.abs(c) < 1e-10) {
              exact.tan[deg] = null;
            } else {
              const t = s / c;
              const abs = Math.abs(t);
              const ts = abs < 1e-10 ? "0" :
                          Math.abs(abs - 1) < 1e-10 ? "1" :
                          abs < 1 ? "sqrt(3)/3" : "sqrt(3)";
              exact.tan[deg] = t < 0 ? "-" + ts : ts;
            }
          }
    
          // Reciprocal functions
          function reciprocal(str) {
            if (!str || str === "0") return null;
            if (str === "1") return "1";
            if (str === "sqrt(3)/3") return "sqrt(3)";
            if (str === "sqrt(3)") return "sqrt(3)/3";
            if (str === "1/2") return "2";
            if (str === "sqrt(2)/2") return "sqrt(2)";
            if (str === "sqrt(3)/2") return "2*sqrt(3)/3";
            return str.startsWith("-") ? "-" + reciprocal(str.slice(1)) : "1/(" + str + ")";
          }
    
          exact.csc = Object.fromEntries(Object.entries(exact.sin).map(([d, s]) => [d, reciprocal(s)]));
          exact.sec = Object.fromEntries(Object.entries(exact.cos).map(([d, s]) => [d, reciprocal(s)]));
          exact.cot = Object.fromEntries(Object.entries(exact.tan).map(([d, s]) => [d, reciprocal(s)]));
    
          // === Choose function ===
          let funcs = ["sin", "cos", "tan"];
          if (USE_RECIPROCALS) funcs.push("csc", "sec", "cot");
    
          let func;
          let deg, k, thetaDeg;
          const baseAngles = Object.keys(exact.sin).map(Number);
    
          do {
            func = funcs[RNG.randInt(0, funcs.length - 1)];
            deg = baseAngles[RNG.randInt(0, baseAngles.length - 1)];
            k = ALLOW_WRAP ? RNG.randInt(-1, 1) : 0;
            if (!ALLOW_NEGATIVE && k < 0) k = 0;
            thetaDeg = deg + 360 * k;
          } while (exact[func][deg] === null);
    
          v.func = func;
          v.answerExpr = exact[func][deg];
    
          // === TeX angle ===
          function texForDegrees(d) {
            return d + "^{\\circ}";
          }
    
          function texForRadians(d) {
            let frac = d / 180;
            const sign = frac < 0 ? "-" : "";
            frac = Math.abs(frac);
            const denom = 12;
            let num = frac * denom;
            const gcf = (a, b) => b ? gcf(b, a % b) : a;
            const g = gcf(num, denom);
            num /= g;
            const den = denom / g;
            return sign + (den === 1 ? num + "\\pi" : "\\tfrac{" + num + "\\pi}{" + den + "}");
          }
    
          v.angleTeX = USE_RADIANS && RNG.randInt(0, 1) === 0
            ? texForRadians(thetaDeg)
            : texForDegrees(thetaDeg);
    
        ]]></setupScript>
      </setup>
    
      <evaluation>
        <evaluate>
          <test correct="yes">
            <mathcmp use-answer="yes"/>
            <feedback><p>Correct, great work ðŸŽ‰</p></feedback>
          </test>
          <test>
            <feedback><p>Not quite. Use an exact radical value like <m>\sqrt{3}/2</m>, not a decimal.</p></feedback>
          </test>
        </evaluate>
      </evaluation>
    
      <solution>
        <p>
          The exact value is
          <math>\ <eval obj="func"/> \!\bigl(<eval obj="angleTeX"/>\bigr)
          = <eval obj="answerExpr"/></math>.
        </p>
      </solution>
    </exercise>

    </exercises>    
  </subsection>


</section>
